package dev.cammiescorner.arcanuscontinuum.common.registry;

import dev.cammiescorner.arcanuscontinuum.Arcanus;
import dev.cammiescorner.arcanuscontinuum.api.spells.*;
import dev.cammiescorner.arcanuscontinuum.common.compat.ArcanusCompat;
import dev.cammiescorner.arcanuscontinuum.common.spell_components.effects.*;
import dev.cammiescorner.arcanuscontinuum.common.spell_components.shapes.*;
import dev.upcraft.sparkweave.api.registry.RegistryHandler;
import dev.upcraft.sparkweave.api.registry.RegistrySupplier;
import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.util.math.Vec3d;
import org.jetbrains.annotations.Nullable;

import java.util.List;

import static dev.cammiescorner.arcanuscontinuum.ArcanusConfig.*;

public class ArcanusSpellComponents {
	public static final RegistryHandler<SpellComponent> SPELL_COMPONENTS = RegistryHandler.create(Arcanus.SPELL_COMPONENTS_REGISTRY_KEY, Arcanus.MOD_ID);

	//-----Empty Spell-----//
	/** DO NOT DELETE OR DISABLE. WILL BREAK THE ENTIRE MOD. **/
	public static final RegistrySupplier<SpellComponent> EMPTY = SPELL_COMPONENTS.register("empty", () -> new SpellShape(true, Weight.NONE, 0, 1, 0, 0, 0) {
		@Override
		public void cast(@Nullable LivingEntity caster, Vec3d castFrom, @Nullable Entity castSource, ServerWorld world, ItemStack stack, List<SpellEffect> effects, List<SpellGroup> spellGroups, int groupIndex, double potency) {
			castNext(caster, castFrom, castSource, world, stack, spellGroups, groupIndex, potency);
		}
	});

	//-----Spell Forms-----//
	public static final RegistrySupplier<SpellShape> SELF = SPELL_COMPONENTS.register("self_shape", () -> new SelfSpellShape(SelfShapeProperties.enabled, SelfShapeProperties.weight, SelfShapeProperties.manaCost, SelfShapeProperties.manaMultiplier, SelfShapeProperties.coolDown, SelfShapeProperties.minimumLevel, SelfShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> TOUCH = SPELL_COMPONENTS.register("touch_shape", () -> new TouchSpellShape(TouchShapeProperties.enabled, TouchShapeProperties.weight, TouchShapeProperties.manaCost, TouchShapeProperties.manaMultiplier, TouchShapeProperties.coolDown, TouchShapeProperties.minimumLevel, TouchShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> PROJECTILE = SPELL_COMPONENTS.register("projectile_shape", () -> new ProjectileSpellShape(ProjectileShapeProperties.enabled, ProjectileShapeProperties.weight, ProjectileShapeProperties.manaCost, ProjectileShapeProperties.manaMultiplier, ProjectileShapeProperties.coolDown, ProjectileShapeProperties.minimumLevel, ProjectileShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> LOB = SPELL_COMPONENTS.register("lob_shape", () -> new ProjectileSpellShape(LobShapeProperties.enabled, LobShapeProperties.weight, LobShapeProperties.manaCost, LobShapeProperties.manaMultiplier, LobShapeProperties.coolDown, LobShapeProperties.minimumLevel, LobShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> BOLT = SPELL_COMPONENTS.register("bolt_shape", () -> new BoltSpellShape(BoltShapeProperties.enabled, BoltShapeProperties.weight, BoltShapeProperties.manaCost, BoltShapeProperties.manaMultiplier, BoltShapeProperties.coolDown, BoltShapeProperties.minimumLevel, BoltShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> BEAM = SPELL_COMPONENTS.register("beam_shape", () -> new BeamSpellShape(BeamShapeProperties.enabled, BeamShapeProperties.weight, BeamShapeProperties.manaCost, BeamShapeProperties.manaMultiplier, BeamShapeProperties.coolDown, BeamShapeProperties.minimumLevel, BeamShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> RUNE = SPELL_COMPONENTS.register("rune_shape", () -> new RuneSpellShape(RuneShapeProperties.enabled, RuneShapeProperties.weight, RuneShapeProperties.manaCost, RuneShapeProperties.manaMultiplier, RuneShapeProperties.coolDown, RuneShapeProperties.minimumLevel, RuneShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> EXPLOSION = SPELL_COMPONENTS.register("explosion_shape", () -> new ExplosionSpellShape(ExplosionShapeProperties.enabled, ExplosionShapeProperties.weight, ExplosionShapeProperties.manaCost, ExplosionShapeProperties.manaMultiplier, ExplosionShapeProperties.coolDown, ExplosionShapeProperties.minimumLevel, ExplosionShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> AOE = SPELL_COMPONENTS.register("aoe_shape", () -> new AreaOfEffectSpellShape(AOEShapeProperties.enabled, AOEShapeProperties.weight, AOEShapeProperties.manaCost, AOEShapeProperties.manaMultiplier, AOEShapeProperties.coolDown, AOEShapeProperties.minimumLevel, AOEShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> SMITE = SPELL_COMPONENTS.register("smite_shape", () -> new SmiteSpellShape(SmiteShapeProperties.enabled, SmiteShapeProperties.weight, SmiteShapeProperties.manaCost, SmiteShapeProperties.manaMultiplier, SmiteShapeProperties.coolDown, SmiteShapeProperties.minimumLevel, SmiteShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> GUARDIAN_ORB = SPELL_COMPONENTS.register("guardian_orb_shape", () -> new GuardianOrbSpellShape(GuardianOrbShapeProperties.enabled, GuardianOrbShapeProperties.weight, GuardianOrbShapeProperties.manaCost, GuardianOrbShapeProperties.manaMultiplier, GuardianOrbShapeProperties.coolDown, GuardianOrbShapeProperties.minimumLevel, GuardianOrbShapeProperties.potencyModifier));
	public static final RegistrySupplier<SpellShape> AGGRESSORB = SPELL_COMPONENTS.register("aggressorb_shape", () -> new AggressorbSpellShape(AggressorbShapeProperties.enabled, AggressorbShapeProperties.weight, AggressorbShapeProperties.manaCost, AggressorbShapeProperties.manaMultiplier, AggressorbShapeProperties.coolDown, AggressorbShapeProperties.minimumLevel, AggressorbShapeProperties.potencyModifier));

	//-----Spell Effects-----//
	public static final RegistrySupplier<SpellEffect> DAMAGE = SPELL_COMPONENTS.register("damage_effect", () -> new DamageSpellEffect(DamageEffectProperties.enabled, SpellType.ATTACK, DamageEffectProperties.weight, DamageEffectProperties.manaCost, DamageEffectProperties.coolDown, DamageEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> FIRE = SPELL_COMPONENTS.register("fire_effect", () -> new FireSpellEffect(FireEffectProperties.enabled, SpellType.ATTACK, FireEffectProperties.weight, FireEffectProperties.manaCost, FireEffectProperties.coolDown, FireEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> ELECTRIC = SPELL_COMPONENTS.register("electric_effect", () -> new ElectricSpellEffect(ElectricEffectProperties.enabled, SpellType.ATTACK, ElectricEffectProperties.weight, ElectricEffectProperties.manaCost, ElectricEffectProperties.coolDown, ElectricEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> ICE = SPELL_COMPONENTS.register("ice_effect", () -> new IceSpellEffect(IceEffectProperties.enabled, SpellType.ATTACK, IceEffectProperties.weight, IceEffectProperties.manaCost, IceEffectProperties.coolDown, IceEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> VULNERABILITY = SPELL_COMPONENTS.register("vulnerability_effect", () -> new VulnerabilitySpellEffect(VulnerabilityEffectProperties.enabled, SpellType.ATTACK, VulnerabilityEffectProperties.weight, VulnerabilityEffectProperties.manaCost, VulnerabilityEffectProperties.coolDown, VulnerabilityEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> MANA_LOCK = SPELL_COMPONENTS.register("mana_lock_effect", () -> new ManaLockSpellEffect(ManaLockEffectProperties.enabled, SpellType.ATTACK, ManaLockEffectProperties.weight, ManaLockEffectProperties.manaCost, ManaLockEffectProperties.coolDown, ManaLockEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> WITHERING = SPELL_COMPONENTS.register("withering_effect", () -> new WitheringSpellEffect(WitheringEffectProperties.enabled, SpellType.ATTACK, WitheringEffectProperties.weight, WitheringEffectProperties.manaCost, WitheringEffectProperties.coolDown, WitheringEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> NECROMANCY = SPELL_COMPONENTS.register("necromancy_effect", () -> new NecromancySpellEffect(NecromancyEffectProperties.enabled, SpellType.ATTACK, NecromancyEffectProperties.weight, NecromancyEffectProperties.manaCost, NecromancyEffectProperties.coolDown, NecromancyEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> MANA_SPLIT = SPELL_COMPONENTS.register("mana_split_effect", () -> new ManaSplitSpellEffect(ManaSplitEffectProperties.enabled, SpellType.ATTACK, ManaSplitEffectProperties.weight, ManaSplitEffectProperties.manaCost, ManaSplitEffectProperties.coolDown, ManaSplitEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> COPPER_CURSE = SPELL_COMPONENTS.register("copper_curse_effect", () -> new CopperCurseSpellEffect(CopperCurseEffectProperties.enabled, SpellType.ATTACK, CopperCurseEffectProperties.weight, CopperCurseEffectProperties.manaCost, CopperCurseEffectProperties.coolDown, CopperCurseEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> DISCOMBOBULATE = SPELL_COMPONENTS.register("discombobulate_effect", () -> new DiscombobulateSpellEffect(DiscombobulateEffectProperties.enabled, SpellType.ATTACK, DiscombobulateEffectProperties.weight, DiscombobulateEffectProperties.manaCost, DiscombobulateEffectProperties.coolDown, DiscombobulateEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> STOCKPILE = SPELL_COMPONENTS.register("stockpile_effect", () -> new StockpileSpellEffect(StockpileEffectProperties.enabled, SpellType.ATTACK, StockpileEffectProperties.weight, StockpileEffectProperties.manaCost, StockpileEffectProperties.coolDown, StockpileEffectProperties.minimumLevel));

	public static final RegistrySupplier<SpellEffect> HEAL = SPELL_COMPONENTS.register("heal_effect", () -> new HealSpellEffect(HealEffectProperties.enabled, SpellType.SUPPORT, HealEffectProperties.weight, HealEffectProperties.manaCost, HealEffectProperties.coolDown, HealEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> DISPEL = SPELL_COMPONENTS.register("dispel_effect", () -> new DispelSpellEffect(DispelEffectProperties.enabled, SpellType.SUPPORT, DispelEffectProperties.weight, DispelEffectProperties.manaCost, DispelEffectProperties.coolDown, DispelEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> REGENERATE = SPELL_COMPONENTS.register("regenerate_effect", () -> new RegenerateSpellEffect(RegenerateEffectProperties.enabled, SpellType.SUPPORT, RegenerateEffectProperties.weight, RegenerateEffectProperties.manaCost, RegenerateEffectProperties.coolDown, RegenerateEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> FORTIFY = SPELL_COMPONENTS.register("fortify_effect", () -> new FortifySpellEffect(FortifyEffectProperties.enabled, SpellType.SUPPORT, FortifyEffectProperties.weight, FortifyEffectProperties.manaCost, FortifyEffectProperties.coolDown, FortifyEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> HASTE = SPELL_COMPONENTS.register("haste_effect", () -> new HasteSpellEffect(HasteEffectProperties.enabled, SpellType.SUPPORT, HasteEffectProperties.weight, HasteEffectProperties.manaCost, HasteEffectProperties.coolDown, HasteEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> MANA_SHIELD = SPELL_COMPONENTS.register("mana_shield_effect", () -> new ManaShieldSpellEffect(ManaShieldEffectProperties.enabled, SpellType.SUPPORT, ManaShieldEffectProperties.weight, ManaShieldEffectProperties.manaCost, ManaShieldEffectProperties.coolDown, ManaShieldEffectProperties.minimumLevel));
//	public static final RegistrySupplier<SpellEffect> TEMPORAL_DILATION = SPELL_COMPONENTS.register("temporal_dilation_effect", () -> new TemporalDilationSpellEffect(temporalDilationEffectProperties.enabled, SpellType.SUPPORT, temporalDilationEffectProperties.weight, temporalDilationEffectProperties.manaCost, temporalDilationEffectProperties.coolDown, temporalDilationEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> DANGER_SENSE = SPELL_COMPONENTS.register("danger_sense_effect", () -> new DangerSenseSpellEffect(DangerSenseEffectProperties.enabled, SpellType.SUPPORT, DangerSenseEffectProperties.weight, DangerSenseEffectProperties.manaCost, DangerSenseEffectProperties.coolDown, DangerSenseEffectProperties.minimumLevel));

	public static final RegistrySupplier<SpellEffect> PUSH = SPELL_COMPONENTS.register("push_effect", () -> new PushSpellEffect(PushEffectProperties.enabled, SpellType.UTILITY, PushEffectProperties.weight, PushEffectProperties.manaCost, PushEffectProperties.coolDown, PushEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> PULL = SPELL_COMPONENTS.register("pull_effect", () -> new PullSpellEffect(PullEffectProperties.enabled, SpellType.UTILITY, PullEffectProperties.weight, PullEffectProperties.manaCost, PullEffectProperties.coolDown, PullEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> POWER = SPELL_COMPONENTS.register("power_effect", () -> new PowerSpellEffect(PowerEffectProperties.enabled, SpellType.UTILITY, PowerEffectProperties.weight, PowerEffectProperties.manaCost, PowerEffectProperties.coolDown, PowerEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> ANONYMITY = SPELL_COMPONENTS.register("anonymity_effect", () -> new AnonymitySpellEffect(AnonymityEffectProperties.enabled, SpellType.UTILITY, AnonymityEffectProperties.weight, AnonymityEffectProperties.manaCost, AnonymityEffectProperties.coolDown, AnonymityEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> MINE = SPELL_COMPONENTS.register("mine_effect", () -> new MineSpellEffect(MineEffectProperties.enabled, SpellType.UTILITY, MineEffectProperties.weight, MineEffectProperties.manaCost, MineEffectProperties.coolDown, MineEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> GROWTH = SPELL_COMPONENTS.register("growth_effect", () -> new GrowthSpellEffect(GrowthEffectProperties.enabled, SpellType.UTILITY, GrowthEffectProperties.weight, GrowthEffectProperties.manaCost, GrowthEffectProperties.coolDown, GrowthEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> SHRINK = ArcanusCompat.PEHKUI.isEnabled() ? SPELL_COMPONENTS.register("shrink_effect", () -> new SizeChangeSpellEffect(ShrinkEffectProperties.enabled, SpellType.UTILITY, ShrinkEffectProperties.weight, ShrinkEffectProperties.manaCost, ShrinkEffectProperties.coolDown, ShrinkEffectProperties.minimumLevel)) : null;
	public static final RegistrySupplier<SpellEffect> ENLARGE = ArcanusCompat.PEHKUI.isEnabled() ? SPELL_COMPONENTS.register("enlarge_effect", () -> new SizeChangeSpellEffect(EnlargeEffectProperties.enabled, SpellType.UTILITY, EnlargeEffectProperties.weight, EnlargeEffectProperties.manaCost, EnlargeEffectProperties.coolDown, EnlargeEffectProperties.minimumLevel)) : null;
	public static final RegistrySupplier<SpellEffect> SPATIAL_RIFT = SPELL_COMPONENTS.register("spatial_rift_effect", () -> new SpatialRiftSpellEffect(SpatialRiftEffectProperties.enabled, SpellType.UTILITY, SpatialRiftEffectProperties.weight, SpatialRiftEffectProperties.manaCost, SpatialRiftEffectProperties.coolDown, SpatialRiftEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> WARDING = SPELL_COMPONENTS.register("warding_effect", () -> new WardingSpellEffect(WardingEffectProperties.enabled, SpellType.UTILITY, WardingEffectProperties.weight, WardingEffectProperties.manaCost, WardingEffectProperties.coolDown, WardingEffectProperties.minimumLevel));

	public static final RegistrySupplier<SpellEffect> BUILD = SPELL_COMPONENTS.register("build_effect", () -> new BuildSpellEffect(BuildEffectProperties.enabled, SpellType.MOVEMENT, BuildEffectProperties.weight, BuildEffectProperties.manaCost, BuildEffectProperties.coolDown, BuildEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> LEVITATE = SPELL_COMPONENTS.register("levitate_effect", () -> new LevitateSpellEffect(LevitateEffectProperties.enabled, SpellType.MOVEMENT, LevitateEffectProperties.weight, LevitateEffectProperties.manaCost, LevitateEffectProperties.coolDown, LevitateEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> SPEED = SPELL_COMPONENTS.register("speed_effect", () -> new SpeedSpellEffect(SpeedEffectProperties.enabled, SpellType.MOVEMENT, SpeedEffectProperties.weight, SpeedEffectProperties.manaCost, SpeedEffectProperties.coolDown, SpeedEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> TELEPORT = SPELL_COMPONENTS.register("teleport_effect", () -> new TeleportSpellEffect(TeleportEffectProperties.enabled, SpellType.MOVEMENT, TeleportEffectProperties.weight, TeleportEffectProperties.manaCost, TeleportEffectProperties.coolDown, TeleportEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> EXCHANGE = SPELL_COMPONENTS.register("exchange_effect", () -> new ExchangeSpellEffect(ExchangeEffectProperties.enabled, SpellType.MOVEMENT, ExchangeEffectProperties.weight, ExchangeEffectProperties.manaCost, ExchangeEffectProperties.coolDown, ExchangeEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> BOUNCY = SPELL_COMPONENTS.register("bouncy_effect", () -> new BouncySpellEffect(BouncyEffectProperties.enabled, SpellType.MOVEMENT, BouncyEffectProperties.weight, BouncyEffectProperties.manaCost, BouncyEffectProperties.coolDown, BouncyEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> FEATHER = SPELL_COMPONENTS.register("feather_effect", () -> new FeatherSpellEffect(FeatherEffectProperties.enabled, SpellType.MOVEMENT, FeatherEffectProperties.weight, FeatherEffectProperties.manaCost, FeatherEffectProperties.coolDown, FeatherEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> ANTI_GRAVITY = SPELL_COMPONENTS.register("anti_gravity_effect", () -> new AntiGravitySpellEffect(AntiGravityEffectProperties.enabled, SpellType.MOVEMENT, AntiGravityEffectProperties.weight, AntiGravityEffectProperties.manaCost, AntiGravityEffectProperties.coolDown, AntiGravityEffectProperties.minimumLevel));
	public static final RegistrySupplier<SpellEffect> MANA_WINGS = SPELL_COMPONENTS.register("mana_wings_effect", () -> new ManaWingsSpellEffect(ManaWingsEffectProperties.enabled, SpellType.MOVEMENT, ManaWingsEffectProperties.weight, ManaWingsEffectProperties.manaCost, ManaWingsEffectProperties.coolDown, ManaWingsEffectProperties.minimumLevel));
}
